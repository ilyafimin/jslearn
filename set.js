// Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа.
//Для перебора коллекции Map есть 3 метода:

map.keys() – возвращает итерируемый объект по ключам,
map.values() – возвращает итерируемый объект по значениям,
map.entries() – возвращает итерируемый объект по парам вида [ключ, значение], этот вариант используется по умолчанию в for..of.

//Кроме этого, Map имеет встроенный метод forEach, схожий со встроенным методом массивов Array
// выполняем функцию для каждой пары (ключ, значение)
recipeMap.forEach((value, key, map) => {
    alert(`${key}: ${value}`); // огурец: 500 и так далее
  });
  \

//Object.entries(obj)
// Возвращает пары [ключ;значение]

//let newObj = new Object(Object.fromEntries(map)); получить значение из map => создать объект
//let newObj = Object.fromEntries(map.entries());
//let newObj = Object.fromEntries(map;

// Множество
// Объект Set –  «множество» значений, где каждое значение уникально.


new Set(iterable) – создаёт Set, и если в качестве аргумента был предоставлен итерируемый объект (обычно это массив), то копирует его значения в новый Set.
set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), возвращает тот же объект set.
set.delete(value) – удаляет значение, возвращает true, если value было в множестве на момент вызова, иначе false.
set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
set.clear() – удаляет все имеющиеся значения.
set.size – возвращает количество элементов в множестве.


//2 
function aclean(arr) {
    let newArr =  arr
  	    .map((item) => item.toLowerCase())
        .map((item) => Array.from(item).sort().join(''));
	
  return Array.from(new Set(newArr));
 }


//WeakMap и WeakSet

Коллекция WeakSet ведёт себя похоже:

    Она аналогична Set, но мы можем добавлять в WeakSet только объекты (не примитивные значения).
    Объект присутствует в множестве только до тех пор, пока доступен где-то ещё.
    Как и Set, она поддерживает add, has и delete, но не size, keys() и не является перебираемой.

/// Object.keys, values, entries